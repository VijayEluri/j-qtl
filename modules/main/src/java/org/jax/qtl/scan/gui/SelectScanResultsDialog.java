/*
 * Copyright (c) 2009 The Jackson Laboratory
 * 
 * This software was developed by Gary Churchill's Lab at The Jackson
 * Laboratory (see http://research.jax.org/faculty/churchill).
 *
 * This is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this software.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.jax.qtl.scan.gui;

import java.awt.event.ItemEvent;

import javax.swing.DefaultListModel;
import javax.swing.JList;
import javax.swing.ListSelectionModel;

import org.jax.qtl.cross.Cross;

/**
 * Dialog for showing scan results
 * @author <A HREF="mailto:keith.sheppard@jax.org">Keith Sheppard</A>
 */
public abstract class SelectScanResultsDialog extends javax.swing.JDialog
{
    /**
     * 
     */
    private static final long serialVersionUID = -7480292078139771074L;

    /**
     * The current cross selection
     */
    protected volatile Cross selectedCross;

    private final Cross[] availableCrosses;
    
    /**
     * Constructor
     * @param parent
     *          the parent frame
     * @param title
     *          the title for this dialog
     * @param selectedCross
     *          the selected cross
     * @param availableCrosses
     *          all available crosses
     */
    public SelectScanResultsDialog(
            java.awt.Frame parent,
            String title,
            Cross selectedCross,
            Cross[] availableCrosses)
    {
        super(parent, title, true);
        
        this.selectedCross = selectedCross;
        this.availableCrosses = availableCrosses;
        
        this.initComponents();
        this.postGuiInit();
    }
    
    /**
     * take care of any GUI initialization that isn't handled by the
     * GUI builder
     */
    private void postGuiInit()
    {
        this.scanResultsList.setModel(
                new DefaultListModel());
        this.scanResultsList.setSelectionMode(
                ListSelectionModel.SINGLE_SELECTION);
        
        Cross selectedCross = this.selectedCross;
        for(Cross currCross: this.availableCrosses)
        {
            this.crossComboBox.addItem(currCross);
        }
        
        if(selectedCross != null)
        {
            this.crossComboBox.setSelectedItem(selectedCross);
        }
        
        this.rebuildScanResultsList();
    }

    /**
     * rebuild the scan results list (usually in response to the selected
     * cross object changing)
     */
    private void rebuildScanResultsList()
    {
        Cross selectedCross = this.selectedCross;
        if(selectedCross != null)
        {
            this.fillListWithScanResults();
            
            if(this.scanResultsList.getModel().getSize() >= 1)
            {
                this.scanResultsList.setSelectedIndex(0);
            }
        }
    }
    
    /**
     * Fill the list with scan results
     * @see #getScanResultsList()
     */
    protected abstract void fillListWithScanResults();
    
    /**
     * Getter for the scan results list
     * @return the scanResultsList
     */
    protected JList getScanResultsList()
    {
        return this.scanResultsList;
    }
    
    /**
     * Respond to an OK clicked event
     */
    protected abstract void ok();
    
    /**
     * Respond to a cancel clicked event
     */
    protected abstract void cancel();
    
    /**
     * This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("all")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        actionPanel = new javax.swing.JPanel();
        okButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        crossLabel = new javax.swing.JLabel();
        crossComboBox = new javax.swing.JComboBox();
        scanResultsLabel = new javax.swing.JLabel();
        scanResultsScrollPane = new javax.swing.JScrollPane();
        scanResultsList = new javax.swing.JList();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        actionPanel.add(okButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        actionPanel.add(cancelButton);

        crossLabel.setText("Cross:");

        crossComboBox.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                crossComboBoxItemStateChanged(evt);
            }
        });

        scanResultsLabel.setText("Scan Results:");

        scanResultsScrollPane.setViewportView(scanResultsList);

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(actionPanel, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(crossLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(crossComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(289, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scanResultsLabel)
                .addContainerGap(297, Short.MAX_VALUE))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(scanResultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 360, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(crossLabel)
                    .add(crossComboBox, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scanResultsLabel)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(scanResultsScrollPane, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(actionPanel, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_okButtonActionPerformed
        this.ok();
        this.dispose();
    }//GEN-LAST:event_okButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        this.cancel();
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void crossComboBoxItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_crossComboBoxItemStateChanged
        if(evt.getStateChange() == ItemEvent.SELECTED)
        {
            this.selectedCross = (Cross)evt.getItem();
            this.rebuildScanResultsList();
        }
    }//GEN-LAST:event_crossComboBoxItemStateChanged
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel actionPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JComboBox crossComboBox;
    private javax.swing.JLabel crossLabel;
    private javax.swing.JButton okButton;
    private javax.swing.JLabel scanResultsLabel;
    private javax.swing.JList scanResultsList;
    private javax.swing.JScrollPane scanResultsScrollPane;
    // End of variables declaration//GEN-END:variables
    
}
